{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst name = 'sidebar';\nconst types = {\n  TOGGLE: `TOGGLE_${name}`\n};\nconst initialState = {\n  open: false\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case types.TOGGLE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          open: !state.open\n        });\n      }\n\n    default:\n      return {\n        state\n      };\n  }\n});\nexport const toggle = () => dispatch => {\n  dispatch({\n    type: types.TOGGLE\n  });\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/dtmFinal/client/redux/reducers/sidebar.js"],"names":["name","types","TOGGLE","initialState","open","state","action","type","toggle","dispatch"],"mappings":";;;;;;AAAA,MAAMA,IAAI,GAAG,SAAb;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAG,UAASF,IAAK;AADb,CAAd;AAGA,MAAMG,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;AAGA,gBAAe,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,KAAK,CAACC,MAAX;AAAmB;AACf,+CACOG,KADP;AACcD,UAAAA,IAAI,EAAE,CAACC,KAAK,CAACD;AAD3B;AAGH;;AACD;AACI,aAAO;AACHC,QAAAA;AADG,OAAP;AAPR;AAWH,CAZD;AAaA,OAAO,MAAMG,MAAM,GAAG,MAAMC,QAAQ,IAAI;AACpCA,EAAAA,QAAQ,CAAC;AAACF,IAAAA,IAAI,EAAEN,KAAK,CAACC;AAAb,GAAD,CAAR;AACH,CAFM","sourcesContent":["const name = 'sidebar'\r\n\r\nconst types = {\r\n    TOGGLE: `TOGGLE_${name}`\r\n}\r\nconst initialState = {\r\n    open: false\r\n}\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.TOGGLE: {\r\n            return {\r\n                ...state, open: !state.open\r\n            }\r\n        }\r\n        default:\r\n            return {\r\n                state\r\n            }\r\n    }\r\n}\r\nexport const toggle = () => dispatch => {\r\n    dispatch({type: types.TOGGLE});\r\n}"]},"metadata":{},"sourceType":"module"}